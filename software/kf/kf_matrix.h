#ifndef KF_MATRIX_H
#define KF_MATRIX_H

/**
 * AUTOGENERATED FILE. DO NOT EDIT.
 * Matrix macros up to 3x3
 */

/**
 * @brief A type representing a matrix of any size less than or equal to KF_MAX_MATRIX_SIZE x KF_MAX_MATRIX_SIZE.
 */
typedef struct KF_matrix {
    unsigned int rows;
    unsigned int cols;
    double data[3][3];
} KF_matrix;

/**
 * @brief Adds two matrices.
 * @param a The first matrix.
 * @param b The second matrix.
 * @return Return the sum of the two matrices.
 */
KF_matrix KF_matrix_add(const KF_matrix a, const KF_matrix b);

/**
 * @brief Subtracts two matrices.
 * @param a The first matrix.
 * @param b The second matrix.
 * @return Returns the difference of the two matrices.
 */
KF_matrix KF_matrix_subtract(const KF_matrix a, const KF_matrix b);

/**
 * @brief Multiplies two matrices.
 * @param a The first matrix.
 * @param b The second matrix.
 * @return Returns the product of the two matrices.
 */
KF_matrix KF_matrix_dot(const KF_matrix a, const KF_matrix b);

/**
 * @brief Transposes a matrix.
 * @param a The matrix to transpose.
 * @return Returns the transposed matrices.
 */
KF_matrix KF_matrix_transpose(const KF_matrix a);

/**
 * @brief Scales a matrix by a scalar value.
 *
 * @param a The matrix to scale.
 * @param scalar The scalar value to multiply each element of the matrix by.
 * @return Returns the scaled matrix.
 */
KF_matrix KF_matrix_scale(const KF_matrix a, double scalar);

/**
 * @brief Inverts a matrix, up to 3x3.
 *
 * @param a The matrix to invert (maximum 3x3).
 * @return Returns the inverse of a.
 */
KF_matrix KF_matrix_inverse(const KF_matrix a);

/**
 * @brief Generates an identity matrix of nxn.
 *
 * @param size The size of the identity matrix.
 * @return Returns the generated identity matrix.
 */
KF_matrix KF_matrix_identity(unsigned int size);

/**
 * @brief Generates a zero matrix of nxm.
 *
 * @param rows The number of rows in the zero matrix.
 * @param cols The number of columns in the zero matrix.
 * @return Returns the generated zero matrix.
 */
KF_matrix KF_matrix_zero(unsigned int rows, unsigned int cols);

/**
 * @brief Utility function to print a matrix.
 *
 * @param a The matrix to print.
 */
void KF_matrix_print(const KF_matrix a);

#define KF_MATRIX(rows, cols) { \
    .rows = (rows), \
    .cols = (cols), \
    .data = {{0}} \
}

#define KF_MATRIX_1x1(data) { \
    .rows = 1, \
    .cols = 1, \
    .data = {{data[0][0]}} \
}

#define KF_MATRIX_1x2(data) { \
    .rows = 1, \
    .cols = 2, \
    .data = {{data[0][0]data[0][1]}} \
}

#define KF_MATRIX_1x3(data) { \
    .rows = 1, \
    .cols = 3, \
    .data = {{data[0][0]data[0][1]data[0][2]}} \
}

#define KF_MATRIX_2x1(data) { \
    .rows = 2, \
    .cols = 1, \
    .data = {{data[0][0]}{data[1][0]}} \
}

#define KF_MATRIX_2x2(data) { \
    .rows = 2, \
    .cols = 2, \
    .data = {{data[0][0]data[0][1]}{data[1][0]data[1][1]}} \
}

#define KF_MATRIX_2x3(data) { \
    .rows = 2, \
    .cols = 3, \
    .data = {{data[0][0]data[0][1]data[0][2]}{data[1][0]data[1][1]data[1][2]}} \
}

#define KF_MATRIX_3x1(data) { \
    .rows = 3, \
    .cols = 1, \
    .data = {{data[0][0]}{data[1][0]}{data[2][0]}} \
}

#define KF_MATRIX_3x2(data) { \
    .rows = 3, \
    .cols = 2, \
    .data = {{data[0][0]data[0][1]}{data[1][0]data[1][1]}{data[2][0]data[2][1]}} \
}

#define KF_MATRIX_3x3(data) { \
    .rows = 3, \
    .cols = 3, \
    .data = {{data[0][0]data[0][1]data[0][2]}{data[1][0]data[1][1]data[1][2]}{data[2][0]data[2][1]data[2][2]}} \
}

#endif //KF_MATRIX_H
