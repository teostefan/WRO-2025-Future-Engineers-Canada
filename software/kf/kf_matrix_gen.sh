#!/bin/bash

CONFIG_FILE="kf_config.h"
OUTPUT_FILE="kf_matrix.h"

# Extract KF_MAX_MATRIX_SIZE from config
MAX=$(grep 'KF_MAX_MATRIX_SIZE' "$CONFIG_FILE" | grep -o '[0-9]\+')
if [ -z "$MAX" ]; then
    # echo "Using default maximum matrix size: 3x3. Define KF_MAX_MATRIX_SIZE in kf_config.h for a specific value."
    # This error will be printed anyways by kf_config.h, no need to print it again.
    MAX=3
fi

cat <<EOF > "$OUTPUT_FILE"
#ifndef KF_MATRIX_H
#define KF_MATRIX_H

/**
 * AUTOGENERATED FILE. DO NOT EDIT.
 * Matrix macros up to ${MAX}x${MAX}
 */

/**
 * @brief A type representing a matrix of any size less than or equal to KF_MAX_MATRIX_SIZE x KF_MAX_MATRIX_SIZE.
 */
typedef struct KF_matrix {
    unsigned int rows;
    unsigned int cols;
    double data[${MAX}][${MAX}];
} KF_matrix;

/**
 * @brief Adds two matrices.
 * @param a The first matrix.
 * @param b The second matrix.
 * @return Return the sum of the two matrices.
 */
KF_matrix KF_matrix_add(const KF_matrix a, const KF_matrix b);

/**
 * @brief Subtracts two matrices.
 * @param a The first matrix.
 * @param b The second matrix.
 * @return Returns the difference of the two matrices.
 */
KF_matrix KF_matrix_subtract(const KF_matrix a, const KF_matrix b);

/**
 * @brief Multiplies two matrices.
 * @param a The first matrix.
 * @param b The second matrix.
 * @return Returns the product of the two matrices.
 */
KF_matrix KF_matrix_dot(const KF_matrix a, const KF_matrix b);

/**
 * @brief Transposes a matrix.
 * @param a The matrix to transpose.
 * @return Returns the transposed matrices.
 */
KF_matrix KF_matrix_transpose(const KF_matrix a);

/**
 * @brief Scales a matrix by a scalar value.
 *
 * @param a The matrix to scale.
 * @param scalar The scalar value to multiply each element of the matrix by.
 * @return Returns the scaled matrix.
 */
KF_matrix KF_matrix_scale(const KF_matrix a, double scalar);

/**
 * @brief Inverts a matrix, up to 3x3.
 *
 * @param a The matrix to invert (maximum 3x3).
 * @return Returns the inverse of a.
 */
KF_matrix KF_matrix_inverse(const KF_matrix a);

/**
 * @brief Generates an identity matrix of nxn.
 *
 * @param size The size of the identity matrix.
 * @return Returns the generated identity matrix.
 */
KF_matrix KF_matrix_identity(unsigned int size);

/**
 * @brief Generates a zero matrix of nxm.
 *
 * @param rows The number of rows in the zero matrix.
 * @param cols The number of columns in the zero matrix.
 * @return Returns the generated zero matrix.
 */
KF_matrix KF_matrix_zero(unsigned int rows, unsigned int cols);

/**
 * @brief Utility function to print a matrix.
 *
 * @param a The matrix to print.
 */
void KF_matrix_print(const KF_matrix a);

#define KF_MATRIX(rows, cols) { \\
    .rows = (rows), \\
    .cols = (cols), \\
    .data = {{0}} \\
}
EOF

for rows in $(seq 1 $MAX); do
    for cols in $(seq 1 $MAX); do
        echo "" >> "$OUTPUT_FILE"
        echo "#define KF_MATRIX_${rows}x${cols}(data) { \\" >> "$OUTPUT_FILE"
        echo "    .rows = $rows, \\" >> "$OUTPUT_FILE"
        echo "    .cols = $cols, \\" >> "$OUTPUT_FILE"
        echo -n "    .data = {" >> "$OUTPUT_FILE"
        for r in $(seq 0 $((rows-1))); do
            echo -n "{" >> "$OUTPUT_FILE"
            for c in $(seq 0 $((cols-1))); do
                echo -n "data[$r][$c]" >> "$OUTPUT_FILE"
                [ $c -lt $((cols-1)) ] && echo -n ", "
            done
            echo -n "}" >> "$OUTPUT_FILE"
            [ $r -lt $((rows-1)) ] && echo -n ", "
        done
        echo "} \\" >> "$OUTPUT_FILE"
        echo "}" >> "$OUTPUT_FILE"
    done
done

echo "" >> "$OUTPUT_FILE"
echo "#endif //KF_MATRIX_H" >> "$OUTPUT_FILE"